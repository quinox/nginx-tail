#!/bin/bash
set -eu
set -o pipefail
cd "$(dirname "$0")"
source helpers/helperhelper.sh


test_ci() {
	banner "ci"
	testscript=./$(basename "$0")
	readarray -t tests <<<"$(sed -n '/^test_/{ s///; s/(.*//; p }' "$testscript")"
	workflow=".github/workflows/ci.yml"
	exitcode=0
	for test in "${tests[@]}"
	do
		[[ "$test" == "all" ]] && continue
		if ! grep "run: $testscript $test" "$workflow" >/dev/null
		then
			>&2 echo "Missing CI: $workflow does not appear to test $test"
			>&2 echo "Please add this:"
			>&2 echo "  test-$test:"
			>&2 echo "    runs-on: ubuntu-latest"
			>&2 echo "    steps:"
			>&2 echo "      - uses: actions/checkout@v4"
			>&2 echo "      - run: $testscript $test"
			exitcode=1
		fi
	done

	[[ "$exitcode" == "0" ]] || exit "$exitcode"
	>&2 echo "Good: all steps mentioned in $testscript are mentioned in $workflow"
}

test_clippy() {
    banner "cargo clippy"
    cargo clippy -- --deny warnings
    cargo clippy --release -- --deny warnings
}

test_fmt() {
	banner "cargo fmt"
	cargo fmt --all -- --check
	>&2 echo "Done"
}

test_shear() {
	banner "cargo shear"
	pre=$(git status Cargo.toml --porcelain)
	if [[ -n "$pre" ]]
	then
		echo "Can't test: Cargo.toml isn't committed."
		return
	fi
	if ! cargo shear --help >/dev/null 2>&1
	then
		die "Command not found: cargo shear. Please install it: cargo install cargo-shear"
	fi
	cargo shear --fix
	post=$(git status Cargo.toml --porcelain)
	if [[ -n "$post" ]]
	then
		die "Unused dependencies as reported by 'cargo shear --fix'. See 'git diff'"
	fi
}

test_shellcheck() {
	banner "ShellCheck"
	command -v shellcheck >/dev/null || die "Please install shellcheck first: sudo apt install shellcheck"

	# TODO: Check we've tested all Bash scripts
	bash_scripts=("./helpers/helperhelper.sh" "./run_tests")
	readarray -t found <<<"$(find . -iname '*.sh' -or -path './run_tests')"
	if [[ "${#found[@]}" -ne $(( "${#bash_scripts[@]}" )) ]]
	then
		>&2 echo "Please update me: you seem to be missing some scripts. You've said you wanted to test ${#bash_scripts[@]} but I found ${#found[@]}"
		>&2 echo "You mentioned:"
		for i in "${bash_scripts[@]}"
		do
			>&2 echo "  $i"
		done
		>&2 echo "I found:"
		for i in "${found[@]}"
		do
			>&2 echo "  $i"
		done
		exit 1
	fi
	shellcheck -x "${bash_scripts[@]}"
	>&2 echo "Done"
}

test_markdown() {
	# This is really commonmark, not Markdown.
	banner "Markdown"

	[[ -d "./venv/" ]] || {
		echo "Setting up a venv..."
		python3 -m venv venv;
	}

	[[ -e "./venv/bin/pymarkdown" ]] || {
		# If we ever change the version we'll have to add version check to this method
		echo "Installing pymarkdownlnt..."
		./venv/bin/pip install pymarkdownlnt==0.9.30;
	}

	./venv/bin/pymarkdown scan ./*.md
	>&2 echo "Done"
}

test_audit() {
	banner "cargo audit"

	if ! cargo audit --help >/dev/null 2>&1
	then
		die "Command not found: cargo audit. Please install it: cargo install cargo-audit --locked"
	fi
	cargo audit
}


test_release() {
	banner "Release with musl"
	./build_release
}

test_cargo_test() {
	banner "cargo test"
	cargo test
}

test_no_default_features() {
	banner "no default features"
	deps_using_default_features=$(tq -f Cargo.toml 'dependencies' --output json | jq 'to_entries[] | select(.value."default-features" != false) | .key' | tr '\n' ' ')
	if [[ "$deps_using_default_features" == "" ]]
	then
		>&2 echo "OK, all dependencies have the default features disabled."
	else
		>&2 echo "Some packages still use their default features, please disable them in Cargo.toml: $deps_using_default_features"
		exit 1
	fi
}

test_self() {
	banner "self test"

	functions_mentioned_in_file=$(sed -n '/^test_/ { s/(.*//; p }' "$0" | grep -v '^test_all$' | sort)
	functions_used_in_test_all=$(sed -n '/^test_all() {/,/^}/ { p }'  "$0" | sed -n '1d; $d; s/^\s*//; /^test_/ { p }' | sort)
	if ! difference=$(diff --color=always -Nur <(echo "$functions_mentioned_in_file") <(echo "$functions_used_in_test_all"))
	then
		>&2 echo "Self test failed: there's a difference between the test functions defined and test functions used within test_all():"
		>&2 echo "$difference"
		exit 1
	fi
	>&2 echo "All good: all test functions are used within test_all()"
}

# TODO: Measure their speed and reorder them from fast to slow
test_all() {
	test_self

	echo ""
	test_no_default_features
	
	echo ""
	test_shear

	echo ""
	test_clippy

	echo ""
	test_fmt

	echo ""
	test_shellcheck

	echo ""
	test_markdown

	echo ""
	test_cargo_test

	echo ""
	test_release

	echo ""
	test_ci

	echo ""
	test_audit
}

if [[ $# -eq 0 ]]
then
	test_all
else

	while [[ $# -gt 0 ]]
	do
		func="test_$1"
		if command -v "$func" >/dev/null
		then
			"$func"
		else
			die "Unknown test $1"
		fi
		shift
	done
fi

echo ""
echo "All testcases passed."
